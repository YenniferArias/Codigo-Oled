#include "I2C.h"
#include "ThisThread.h"
#include "mbed.h"
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h" 
#include <cstring>

#define tiempo_muestreo   1s
// Direcci√≥n del TMP102
#define TMP102_ADDRESS 0x90

//Pines y puertos 
BufferedSerial serial(USBTX, USBRX);
I2C i2c (D14,D15);
Adafruit_SSD1306_I2c oled (i2c, D0);
AnalogIn ain(A0);

// Variables globales 
float Vin=0.0;
int ent=0;
int dec=0;
char men[40];

char comando[3]= {0x01, 0x60,0xA0};
char data[2];


const char *mensaje_inicio = "Arranque del programa\n\r";

void init_display() {
    oled.begin();
    oled.setTextSize(1);
    oled.setTextColor(1);
    oled.display();
    ThisThread::sleep_for(3000ms);
    oled.clearDisplay();
    oled.display();
    oled.printf("Test\r\n");
    oled.display();
}

void Leer_Voltaje_Analogo() {
    float Vin = ain * 3.3;
    int ent = int(Vin);
    int dec = int((Vin - ent) * 10000);
    
    oled.clearDisplay();
    oled.display();
    sprintf(men, "El voltaje es:\n\r %01u.%04u volts \n\r", ent, dec);
    oled.setTextCursor(0, 2);
    oled.printf(men);
    oled.display();
    serial.write(men, strlen(men));
}

float leer_temperatura() {
    comando[0] = 0; // Registro de temperatura
    i2c.write(TMP102_ADDRESS, comando, 1); // Enviar el comando para leer
    i2c.read(TMP102_ADDRESS, data, 2); // Leer 2 bytes
    int16_t temp = (data[0] << 4) | (data[1] >> 4);
    return temp * 0.0625; 
}

void display_temperatura(float temperature) {
    int ent = int(temperature);
    int dec = int((temperature - ent) * 10000);
    
    oled.clearDisplay();
    oled.display();
    sprintf(men, "La Temperatura es:\n\r %01u.%04u Celsius\n\r", ent, dec);
    oled.setTextCursor(0, 2);
    oled.printf(men);
    oled.display();
    serial.write(men, strlen(men));
}

int main() { 
    init_display();
    serial.write(mensaje_inicio, strlen(mensaje_inicio));
    i2c.write(TMP102_ADDRESS, comando, 3); // Iniciar el sensor de temperatura

    while (true) {
        Leer_Voltaje_Analogo();
        
        float temperature = leer_temperatura();
        display_temperatura(temperature);
        
        ThisThread::sleep_for(tiempo_muestreo);
    }
}
